import React, { useState, useEffect } from 'react';

const FinanceCopilot = () => {
  const [income, setIncome] = useState('');
  const [expenses, setExpenses] = useState('');
  const [riskLevel, setRiskLevel] = useState('Medium');
  const [report, setReport] = useState(null);
  
  const calculateReport = () => {
    if (!income || !expenses) return;
    
    const incomeNum = parseFloat(income);
    const expensesNum = parseFloat(expenses);
    
    if (isNaN(incomeNum) || isNaN(expensesNum) || incomeNum <= 0) return;
    
    const savings = incomeNum - expensesNum;
    const savingsPercent = (savings / incomeNum * 100).toFixed(1);
    
    const essentialExpenses = incomeNum * 0.5;
    const discretionarySpending = incomeNum * 0.3;
    const savingsInvestments = incomeNum * 0.2;
    
    let investments = [];
    let investmentRationale = '';
    let proTip = '';
    
    if (riskLevel === 'Low') {
      investments = ['High-yield Savings', 'Treasury Bonds', 'Certificate of Deposits'];
      investmentRationale = 'Focus on capital preservation with steady, modest returns.';
      proTip = 'Build an emergency fund covering 6 months of expenses before investing elsewhere.';
    } else if (riskLevel === 'Medium') {
      investments = ['Index ETFs', 'Mutual Funds', 'Blue-chip Dividend Stocks'];
      investmentRationale = 'Balance between growth and safety with moderate volatility.';
      proTip = 'Consider dollar-cost averaging to reduce timing risk in the market.';
    } else {
      investments = ['Growth Stocks', 'Emerging Markets', 'Real Estate Investment Trusts'];
      investmentRationale = 'Potential for higher returns with increased volatility and risk.';
      proTip = 'Diversify across sectors and regions to manage your high-risk portfolio.';
    }
    
    setReport({
      income: incomeNum,
      expenses: expensesNum,
      savings,
      savingsPercent,
      essentialExpenses,
      discretionarySpending,
      savingsInvestments,
      riskLevel,
      investments,
      investmentRationale,
      proTip
    });
  };
  
  useEffect(() => {
    if (income && expenses) {
      calculateReport();
    }
  }, [income, expenses, riskLevel]);
  
  return (
    <div className="p-6 max-w-4xl mx-auto bg-white rounded-lg shadow-lg">
      <h1 className="text-2xl font-bold text-blue-600 mb-6">AI Finance Copilot</h1>
      
      <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">Monthly Income ($)</label>
          <input
            type="number"
            value={income}
            onChange={(e) => setIncome(e.target.value)}
            className="w-full p-2 border border-gray-300 rounded"
            placeholder="3000"
            min="1"
          />
        </div>
        
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">Monthly Expenses ($)</label>
          <input
            type="number"
            value={expenses}
            onChange={(e) => setExpenses(e.target.value)}
            className="w-full p-2 border border-gray-300 rounded"
            placeholder="2000"
            min="0"
          />
        </div>
        
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">Risk Level</label>
          <select
            value={riskLevel}
            onChange={(e) => setRiskLevel(e.target.value)}
            className="w-full p-2 border border-gray-300 rounded"
          >
            <option value="Low">Low</option>
            <option value="Medium">Medium</option>
            <option value="High">High</option>
          </select>
        </div>
      </div>
      
      {report && (
        <div className="bg-gray-50 p-6 rounded-lg border border-gray-200">
          <div className="mb-6">
            <h2 className="text-xl font-bold text-blue-600 flex items-center mb-3">
              <span className="mr-2">ðŸ’°</span> Savings Report
            </h2>
            <ul className="space-y-1">
              <li>Monthly Income: ${report.income.toLocaleString()}</li>
              <li>Monthly Expenses: ${report.expenses.toLocaleString()}</li>
              <li className="font-medium">
                Savings: ${report.savings.toLocaleString()} ({report.savingsPercent}% of Income)
              </li>
            </ul>
          </div>
          
          <div className="mb-6">
            <h2 className="text-xl font-bold text-blue-600 flex items-center mb-3">
              <span className="mr-2">ðŸ“Š</span> Budget Breakdown
            </h2>
            <ul className="space-y-1">
              <li>Essential Expenses (50%): ${report.essentialExpenses.toLocaleString()}</li>
              <li>Discretionary Spending (30%): ${report.discretionarySpending.toLocaleString()}</li>
              <li>Savings & Investments (20%): ${report.savingsInvestments.toLocaleString()}</li>
            </ul>
          </div>
          
          <div className="mb-6">
            <h2 className="text-xl font-bold text-blue-600 flex items-center mb-3">
              <span className="mr-2">ðŸ“ˆ</span> Investment Advice (Risk: {report.riskLevel})
            </h2>
            <div>
              <p className="font-medium">Suggested investments:</p>
              <p>{report.investments.join(', ')}</p>
              <p className="mt-2 font-medium">Why?</p>
              <p>{report.investmentRationale}</p>
            </div>
          </div>
          
          <div>
            <h2 className="text-xl font-bold text-blue-600 flex items-center mb-3">
              <span className="mr-2">ðŸ’¡</span> Pro Tip
            </h2>
            <p>{report.proTip}</p>
          </div>
        </div>
      )}
      
      {!report && income === '' && expenses === '' && (
        <div className="text-center p-8 bg-gray-50 rounded-lg border border-gray-200">
          <p className="text-lg text-gray-600">
            Enter your financial information above to get personalized advice
          </p>
        </div>
      )}
    </div>
  );
};

export default FinanceCopilot;